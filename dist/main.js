/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("const listsContainer = document.querySelector('[data-lists]');\nconst newListForm = document.querySelector('[data-new-list-form]')\nconst newListInput = document.querySelector('[data-new-list-input]')\nconst deleteListButton = document.querySelector('[data-delete-list-button]')\nconst listDisplayContainer = document.querySelector('[data-list-display-container');\nconst listTitleElement = document.querySelector('[data-list-title');\nconst listCountElement = document.querySelector('[data-list-count');\nconst tasksContainer = document.querySelector('[data-tasks]')\nconst taskTemplate = document.getElementById('task-template');\nconst addNewTaskButton = document.querySelector('[data-add-new-task]');\n\nconst newTaskForm = document.querySelector('[data-new-task-form]');\nconst newTaskInput = document.querySelector('[data-new-task-Input]')\n\n// let lists = [{\n//   id: 1,\n//   name: 'name'\n// }, {\n//   id: 2,\n//   name: 'todo' \n// }];\n\nconst LOCAL_STORAGE_LIST_KEY =  'task.lists';\n// create a local storage for selected list id\nconst LOCAL_STORAGE_SELECTED_LIST_ID_KEY =  'task.selectedListId';\n\nlet lists = JSON.parse(localStorage.getItem(LOCAL_STORAGE_LIST_KEY)) || [];\nlet selectedListId = localStorage.getItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY)\n\nlistsContainer.addEventListener('click', e => {\n  if(e.target.tagName.toLowerCase() === 'li') {\n    selectedListId = e.target.dataset.listId;\n    saveAndRender();\n  }\n})\n\ntasksContainer.addEventListener('click', e => {\n  if (e.target.tagName.toLowerCase() === 'input') {\n    const selectedList = lists.find(list => list.id === selectedListId)\n    const selectedTask = selectedList.tasks.find(task => task.id === e.target.id);\n    console.log(selectedTask)\n    selectedTask.complete = e.target.checked;\n    save();\n    renderTaskCount(selectedList);\n  }\n})\n\ndeleteListButton.addEventListener('click', e => {\n  lists = lists.filter(list => list.id !== selectedListId)\n  selectedListId = null;\n  saveAndRender();\n})\n\nnewListForm.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const listName = newListInput.value;\n  if (listName == null || listName === '') return\n  const list = createList(listName);\n  newListInput.value = null;\n  lists.push(list);\n  saveAndRender();\n})\n\nnewTaskForm.style.display = 'none';\n\nnewTaskForm.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const taskName = newTaskInput.value;\n  if (taskName == null || taskName === '') return\n  const task = createTask(taskName);\n  newTaskInput.value = null;\n  const selectedList = lists.find(list => list.id === selectedListId)\n  selectedList.tasks.push(task);\n  saveAndRender();\n})\n\nfunction createList(name) {\n  return { id: Date.now().toString(), name: name, tasks: [] }\n}\n\nfunction createTask(name) {\n  return { id: Date.now().toString(), name: name, complete: false }\n}\n\nfunction saveAndRender() {\n  save();\n  render();\n}\n\nfunction save() {\n  localStorage.setItem(LOCAL_STORAGE_LIST_KEY, JSON.stringify(lists));\n  localStorage.setItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY, selectedListId);\n}\n\nfunction render() {\n  clearElement(listsContainer);\n  renderLists();\n\n  const selectedList = lists.find(list => list.id === selectedListId)\n  if (selectedListId == null) {\n    listDisplayContainer.style.display = 'none'\n  } else {\n    listDisplayContainer.style.display = '';\n    listTitleElement.innerText = selectedList.name;\n    renderTaskCount(selectedList);\n    clearElement(tasksContainer);\n    addNewTaskButton.addEventListener('click', e => {\n      newTaskForm.style.display = '';\n    })\n    renderTasks(selectedList);\n  }\n}\n\nfunction renderTasks(selectedList) {\n  selectedList.tasks.forEach(task => {\n    const taskElement = document.importNode(taskTemplate.content, true);\n    // get each task id\n    // taskElement.dataset.taskId = task.id;\n    const checkbox = taskElement.querySelector('input');\n    checkbox.id = task.id;\n    checkbox.checked = task.complete;\n    // checkbox.priority = task.priority;\n    const label = taskElement.querySelector('label');\n    label.htmlFor = task.id;\n    label.append(task.name);\n    tasksContainer.appendChild(taskElement);\n    // const selectPriorBox = taskElement.getElementById('priority');\n    // selectPriorBox.value = task.value;\n  })\n}\n\nfunction renderTaskCount(selectedList) {\n  const incompleteTaskCount = selectedList.tasks.filter(task => !task.complete).length;\n  const taskString = incompleteTaskCount <= 1 ? 'task' : 'tasks';\n  listCountElement.innerText = `${incompleteTaskCount} ${taskString} remaining`;\n}\n\nfunction renderLists() {\n  lists.forEach(list => {\n    const listElement = document.createElement('li');\n    listElement.dataset.listId = list.id;\n    listElement.classList.add('list-name');\n    listElement.innerText = list.name;\n    if (list.id === selectedListId) {\n      listElement.classList.add('active-list')\n    }\n    listsContainer.appendChild(listElement)\n  })\n}\n\nfunction clearElement(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\nrender();\n\n//# sourceURL=webpack://my-todo-app/./src/index.js?");
/******/ })()
;